FFA School Files
================

These files form the main source material for the FFA school held at PSI on
22nd Nov 2019, for tracking an FFA using the OPAL code. This tutorial is
tested against opal version 2.0.1

Contact: chris.rogers@stfc.ac.uk

Table of Contents
-----------------
1. Setting up the environment
2. Running a first example
3. Finding closed orbits
4. Finding tunes
5. Finding dynamic aperture
6. Extended examples



1. Setting up the Environment
-----------------------------

Summary of commands (tested in linux mint 19.1), assuming you have sudo 
privileges:

  sudo apt-get install python3-devel python3-pip g++
  pip3 install numpy matplotlib scipy
  git clone https://github.com/chrisrogers1234/xboa.git
  cd xboa
  sudo python setup.py install
  cd ..

Not needing sudo privileges:

  mkdir /path/to/working/dir
  cd /path/to/working/dir
  git clone https://github.com/chrisrogers1234/ffa-school.git
  wget http://amas.web.psi.ch/Downloads/OPAL/package/OPAL-2.0.1-1-x86_64-linux.tar.xz
  tar -xf OPAL-2.0.1-1-x86_64-linux.tar.xz
  source OPAL-2.0.1-1/etc/profile.d/opal.sh

Before running the examples:

  cd /path/to/working/dir
  export OPAL_EXE_PATH=OPAL-2.0.1-1/bin/
  cd ffa-school
  source env.sh

The env.sh script also checks that the environment is okay and returns an error
message if it detects missing libraries.


2. Running a first example
--------------------------
There is an example FFA lattice file in the first_run directory. In order to run
it, first copy the directory to output, so that you don't write into the 
original directory:

    cp -r first_run output

in this tutorial, all of the output files will be kept in the output directory.
In this directory there are two files

    disttest.dat FETS_Ring.opal

FETS_Ring.opal contains the main lattice files; disttest.dat contains 
information about the input distribution.

Try running:

    cd output/first_run
    ${OPAL_EXE_PATH}/opal FETS_Ring.opal

You should see output that starts with

    Ippl> CommMPI: Parent process waiting for children ...
    Ippl> CommMPI: Initialization complete.
    >                ____  _____       ___ 
    >               / __ \|  __ \ /\   | | 
    >              | |  | | |__) /  \  | |
    >              | |  | |  ___/ /\ \ | |
    >              | |__| | |  / ____ \| |____
    >               \____/|_| /_/    \_\______|

and ends with

    Timings> Write Stat.......... Wall max =  0.0003146, CPU max =          0
    Timings>                      Wall avg =  0.0003146, CPU avg =          0
    Timings>                      Wall min =  0.0003146, CPU min =          0
    Timings> 
    Timings> -----------------------------------------------------------------

OPAL generates lots of files in the working directory. In these examples, there
are two files that we will look at initially

* FETS_Ring-trackOrbit.dat contains step-by-step tracking information.
* FieldMapXY.dat contains information describing the magnetic field generated by 
the FFA magnets.

There is a script to plot the field map, with the closed orbit superimposed, in
the scripts directory. Try running the plot_orbit.py script

    python3 ../../scripts/plotting/plot_orbit.py output/first_run/FETS_Ring-trackOrbit.dat

You should get output ending in

    plot_orbit finished okay

You should see a new file,

    closed_orbit_plan_bz.png

Open the file using an image viewing software, like gimp, gwenview, gthumb or
firefox.

The image shows colours (blue through red), which indicate the vertical 
component of the field map and a black wavy line which indicates the trajectory
of the particle that was tracked through the field.

2.1 Input Particle Control
--------------------------
Let's try changing the inputs to our tracking simulation and see how the output
changes.

disttest.dat contains the input position and momentum of a particle relative to
some reference trajectory. Open the file in a text editor (for example, emacs,
vim or nano)

disttest.dat:
1 <--- number of particles in the file
3.997870104214539 -0.007682059555892479 0.0 -0.00041030187886083926 0.0 0.0
 ^                     ^                 ^           ^               ^   ^
radial              radial            vertical      vertical       longitudinal
position [m]        beta gamma        position [m]  beta gamma     position and beta gamma

Here "beta gamma" is the (momentum component)/mass, i.e., 

        (relativistic beta)*(relativistic gamma)

Try increasing the initial radial position by to 4.10 m

disttest.dat:
1
4.10 -0.007682059555892479 0.0 -0.00041030187886083926 0.0 0.0

Rerun opal and make the plot of the orbit again.

    ${OPAL_EXE_PATH}/opal FETS_Ring.opal
    python3 ../../scripts/plotting/plot_orbit.py output/first_run/FETS_Ring-trackOrbit.dat

and the orbitting particle can be seen to oscillate.

2.2 The Lattice file
--------------------
Open FETS_Ring.opal in a text editor. You will see that the file is about 200 
lines long:

* At the top of the file are some run controls, prefixed by "Option," and
  lattice parameters real variables, prefixed by "REAL".
* // delineates comments
* There are a few elements defined, starting at line 150:
** ringDef, which is a RINGDEFINITION element that holds global ring parameters.
** halfDrift, which is an OFFSET element that introduces an offset between 
   elements.
** magnetD, which is a SCALINGFFAMAGNET element
** magnetF, which is also a SCALINGFFAMAGNET element
* Below the field elements are some field output "elements" of type DUMPFIELDS 
  or DUMPEMFIELDS. You will see that one of them, on line 193, has a filename
  "FieldMapXY.dat". This generates the field map that was used for plotting in 
  the previous section.
* on line 207, there is element cell of type LINE. This holds the beam elements
  in a single cell (a drift, F magnet, D magnet, then another drift).
* on line 208, there is element ring of type LINE, which is the top level line.
** The RingDef must be placed first in the top level line
** A drift is placed to rotate the first element azimuthally (it is also 
   possible to use the RingDef LAT_PHIINIT to do the same thing).
** The 15 cells of the ring are placed.
** The probes are placed. Note probes are in global coordinates, unlike the 
   other elements. 

Try changing the input file. Try changing the FFA_B_MEAN parameter to 0.400 [T].
This will change the mean field on the reference radius, 4.0 metres in this 
example. Now run the simulation and make the plot.

    ${OPAL_EXE_PATH}/opal FETS_Ring.opal
    python3 ../../scripts/plotting/plot_orbit.py output/first_run/FETS_Ring-trackOrbit.dat

The orbiting particle is (almost) back on a closed orbit.

Try changing some other things in the input file:
* Remove a cell from the lattice.
* Change the fringe field length of one or both of the magnets by editing the 
  magnetF or magnetD element.
* Change the scale of the field map by editing the DUMPFIELDS command.

You can always recover the original files by copying from ffa-school/first_run

3. Finding Lattice Parameters
-----------------------------
It is useful to be able to find lattice parameters based on the tracking 
routines. In this section, we will run a series of scripts to find the tune,
closed orbit and dynamic aperture of the ring.

The basic operation of the script is handled by a number of 


3.1 Closed orbit scripts
------------------------









